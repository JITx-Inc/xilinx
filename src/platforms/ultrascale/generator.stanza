defpackage xilinx/platforms/ultrascale/generator :
  import core
  import collections
  import maybe-utils

  import xilinx/bundler
  import xilinx/pinouts
  import xilinx/pin-ir
  import xilinx/pad-ref
  import xilinx/generator-utilities
  import xilinx/platforms/ultrascale/types
  import xilinx/platforms/ultrascale/parser

;============================================================
;========================= Outline ==========================
;============================================================

;Holds all the statements in each section of the auto-generated component
defstruct ComponentOutline :
  comp-ports:Vector<Expr> with: (init => Vector<Expr>())
  pin-props:Vector<Expr> with: (init => Vector<Expr>())
  module-ports:Vector<Expr> with: (init => Vector<Expr>())
  module-nets:Vector<Expr> with: (init => Vector<Expr>())
  support-stmts:Vector<Expr> with: (init => Vector<Expr>())
  support-funcs:Vector<Expr> with: (init => Vector<Expr>())

;Add a pin properties row
defn add-pin-prop-row (outline:ComponentOutline, name:Expr, pads:PadRef,
                       xilinx-bank:Int = 0 -- symbol-bank:Maybe<Expr> = None())
                       -> False :
  add(pin-props(outline), pin-props-stmt(name, [pads], xilinx-bank,
    symbol-bank = symbol-bank))
defn add-pin-prop-row (outline:ComponentOutline, name:Expr, pads:PadRef,
                       xilinx-bank?:Maybe<Int> --
                       symbol-bank:Maybe<Expr> = None()) -> False :
  add-pin-prop-row(outline, name, pads, value-or(xilinx-bank?, 0),
    symbol-bank = symbol-bank)

;Add a port declaration
defn add-port-decl (outline:ComponentOutline, name:Expr, type:Expr,
                    indices:Tuple<Int>|False) -> False :
  match(indices) :
    (indices:Tuple<Int>) :
      if length(indices) > 0 :
        add(comp-ports(outline), port-decl-stmt(name, type, indices))
    (_) :
      add(comp-ports(outline), port-decl-stmt(name, type))

;Add module pin declaration and net loop
defn add-module-pin-and-net-loop (outline:ComponentOutline, name:Expr)
                                  -> False :
  add(module-ports(outline), pin-decl-stmt(name))
  add(module-nets(outline), port-net-loop-stmt(name))

;============================================================
;===================== Pin Organization =====================
;============================================================

defstruct IOBankIDs :
  high-density-banks:Tuple<Int>
  high-perf-banks:Tuple<Int>
  short-high-perf-banks:Tuple<Int>

;============================================================
;======================== Generator =========================
;============================================================

val SIMPLE-TMPLT =
\<s>#use-added-syntax(jitx)
defpackage components/%_ :
  import core
  import collections

  import jitx
  import jitx/commands

  import jsl/design/settings
  import jsl/bundles
  import jsl/bundles/debug
  import jsl/symbols/box-symbol

  import bundles/ultrascale
  import landpatterns/%_

%_

%_

%_

%_
<s>

;Generate the component and module definition from a pinout
public defn generate-component (name:String, landpattern-name:String, pinout:XilinxPinout) -> String :
  val dedicated-pins = Vector<USDedicatedPin>()
  val io-pins = Vector<USIOPin>()
  for pd in pins(pinout) do :
    match(parse(pd)) :
      (p:USDedicatedPin) : add(dedicated-pins, p)
      (p:USIOPin) : add(io-pins, p)

  val outline = ComponentOutline()
  make-dedicated-pin-properties(outline, dedicated-pins)
  val io-bank-ids = make-io-pin-properties(outline, io-pins)
  make-supports(outline, io-pins, io-bank-ids)
  fill-template-with-outline(outline, name, landpattern-name)

;============================================================
;========================= Helpers ==========================
;============================================================

defn fill-template-with-outline (outline:ComponentOutline, name:String, landpattern-name:String) -> String :
  val props-stmt = BodyExpr("pin-properties :",
    ["[ pin:Ref | pads:Ref ... | bank:(Ref|Int) | xilinx-bank:Int | memory-byte-group:Int ]"],
    seq(to-string, pin-props(outline)))
  val symbol-stmts = [
    "val box = BoxSymbol(self)",
    BodyExpr("val unique-sym-banks = to-tuple $ unique $ for p in pins(self) seq :",
      ["property(p.bank)"])
    BodyExpr("property(self.bank-mappings) = to-tuple $ for (i in 0 to false, sym in unique-sym-banks) seq :",
      ["sym => i"])
    "assign-symbols(seq({_ => box}, unique-sym-banks))"
    ]
  val comp-stmt = BodyExpr("protected pcb-component component :",
    seq(to-string, comp-ports(outline)),
    [props-stmt],
    symbol-stmts,
    ["assign-landpattern(%_)" % [landpattern-name]]
    )
  val module-stmt = BodyExpr("protected pcb-module module :",
    seq(to-string, module-ports(outline)),
    ["",
      "inst comp : component",
      "val bank-mappings = property(comp.bank-mappings)"
      for-stmt("bank-mapping", "bank-mappings", [
        BodyExpr("schematic-group(comp, value(bank-mapping)) = (", [
          BodyExpr("match(key(bank-mapping)) :", [
            "(r:Ref) : r"
            "(i:Int) : IndexRef(Ref(`bank), i))"
            ])
          ])
        ])
      ""],
    seq(to-string, module-nets(outline)),
    ["", "make-supports(comp)"]
  )
  val supports-stmt = BodyExpr("defn make-supports (comp:Instance) :",
    to-tuple(seq(to-string, support-stmts(outline))))
  val support-funcs = string-join(support-funcs(outline), "\n\n")

  to-string $ SIMPLE-TMPLT % [name, landpattern-name, comp-stmt, module-stmt,
    supports-stmt, support-funcs]

;Create pin property rows, port declarations, and net statmenets from the
;dedicated pins
defn make-dedicated-pin-properties (outline:ComponentOutline, dedicated-pins:Vector<USDedicatedPin>) -> False :
  ;Group pins by pin name
  val groups = to-vector<Vector<USDedicatedPin>> $ values $ group-by-bundle(/name, dedicated-pins)
  ;Sort pins in each group by pad name
  do(qsort!{pad, _}, groups)
  ;Sort groups by size then pin name
  ; qsort!({[(- length(_0)), name(_0[0])]}, groups)
  qsort!{groups, _} $ fn (a, b) :
    compare([(- length(a)), name(a[0])], [(- length(b)), name(b[0])])

  val dqs-indices = IntSet()
  val ddr-clock-indices = IntSet()
  val gt-clock-indices = IntSet()
  val ps-gt-clock-indices = IntSet()
  val gth-banks = IntSet()
  val gty-banks = IntSet()
  val gtr-banks = IntSet()

  for group in groups do :
    val p = group[0]
    match(funcs(p)[0]) :
      (f:JTAGType) :
        if length(group) > 1 :
          throw(Exception("Unexpected: multiple pins found with name %_" % [name(p)]))
        val name* = switch(signal(f)) :
          TCK : "PS_JTAG.tck"
          TMS : "PS_JTAG.tms"
          TDI : "PS_JTAG.tdi"
          TDO : "PS_JTAG.tdo"
        set-final-ref(p, name*)
        add-pin-prop-row(outline, name*, pad(p))

      (f:PowerRailType) :
        if length(group) > 1 :
          ;Multi-pad pin
          val grp-name = let :
            val grp-name = strip-bank(name(p), bank(p))
            if grp-name == "VCCO" :
              name(p) ;do not strip bank number from VCCO pin
            else :
              grp-name
          for (i in 0 to false, p* in group) do :
            val name* = "%_[%_]" % [grp-name, i]
            set-final-ref(p*, name*)
            add-pin-prop-row(outline, name*, pad(p*), bank(p*), symbol-bank = One(grp-name))
          add-module-pin-and-net-loop(outline, grp-name)
        else :
          val [name*, bank] = match(bank(f)) :
            (bank:One<Int>) :
              val name* = to-string $ "%_[%_]" % [strip-last-comp(name(p)), value(bank)]
              [name*, value(bank)]
            (_) :
              [name(p), 0]
          set-final-ref(p, name*)
          add-pin-prop-row(outline, name*, pad(p), bank)

      (f:PSIOPowerSupplyType) :
        if length(group) > 1 :
          ;Multi-pad pin
          val grp-name = to-string $ "VCCO_PSIO%_" % [index(f)]
          for (i in 0 to false, p* in group) do :
            val name* = "%_[%_]" % [grp-name, i]
            set-final-ref(p*, name*)
            add-pin-prop-row(outline, name*, pad(p*), bank(p*), symbol-bank = One(grp-name))
          add-module-pin-and-net-loop(outline, grp-name)
        else :
          val name* = to-string $ "VCCO_PSIO[%_]" % [index(f)]
          set-final-ref(p, name*)
          add-pin-prop-row(outline, name*, pad(p), bank(f))

      (f:PSDDRDataType) :
        if length(group) > 1 :
          throw(Exception("Unexpected: multiple pins found with name %_" % [name(p)]))
        val name* = "PS_DDR_DQ[%_]" % [index(f)]
        set-final-ref(p, name*)
        add-pin-prop-row(outline, name*, pad(p), bank(p))

      (f:PSDDRStrobeType) :
        if length(group) > 1 :
          throw(Exception("Unexpected: multiple pins found with name %_" % [name(p)]))
        add(dqs-indices, index(f))
        val name* = to-string $ "PS_DDR_DQS[%_].%_" % [index(f), to-letter(polarity(f))]
        set-final-ref(p, name*)
        add-pin-prop-row(outline, name*, pad(p), bank(p))

      (f:PSDDRAddrType) :
        if length(group) > 1 :
          throw(Exception("Unexpected: multiple pins found with name %_" % [name(p)]))
        val name* = "PS_DDR_A[%_]" % [index(f)]
        set-final-ref(p, name*)
        add-pin-prop-row(outline, name*, pad(p), bank(p))

      (f:PSDDRBankAddrType) :
        if length(group) > 1 :
          throw(Exception("Unexpected: multiple pins found with name %_" % [name(p)]))
        val name* = "PS_DDR_BA[%_]" % [index(f)]
        set-final-ref(p, name*)
        add-pin-prop-row(outline, name*, pad(p), bank(p))

      (f:PSDDRBankGroupType) :
        if length(group) > 1 :
          throw(Exception("Unexpected: multiple pins found with name %_" % [name(p)]))
        val name* = "PS_DDR_BG[%_]" % [index(f)]
        set-final-ref(p, name*)
        add-pin-prop-row(outline, name*, pad(p), bank(p))

      (f:PSDDRClockType) :
        if length(group) > 1 :
          throw(Exception("Unexpected: multiple pins found with name %_" % [name(p)]))
        add(ddr-clock-indices, index(f))
        val name* = to-string $ "PS_DDR_CK[%_].%_" % [index(f), to-letter(polarity(f))]
        set-final-ref(p, name*)
        add-pin-prop-row(outline, name*, pad(p), bank(p))

      (f:PSDDRChipSelectType) :
        if length(group) > 1 :
          throw(Exception("Unexpected: multiple pins found with name %_" % [name(p)]))
        val name* = "PS_DDR_CS_N[%_]" % [index(f)]
        set-final-ref(p, name*)
        add-pin-prop-row(outline, name*, pad(p), bank(p))

      (f:PSDDRDataMaskType) :
        if length(group) > 1 :
          throw(Exception("Unexpected: multiple pins found with name %_" % [name(p)]))
        val name* = "PS_DDR_DM[%_]" % [index(f)]
        set-final-ref(p, name*)
        add-pin-prop-row(outline, name*, pad(p), bank(p))

      (f:PSDDRTerminationControlType) :
        if length(group) > 1 :
          throw(Exception("Unexpected: multiple pins found with name %_" % [name(p)]))
        val name* = "PS_DDR_ODT[%_]" % [index(f)]
        set-final-ref(p, name*)
        add-pin-prop-row(outline, name*, pad(p), bank(p))

      (f:PSMultiplexedIOType) :
        if length(group) > 1 :
          throw(Exception("Unexpected: multiple pins found with name %_" % [name(p)]))
        val name* = "PS_MIO[%_]" % [index(f)]
        set-final-ref(p, name*)
        add-pin-prop-row(outline, name*, pad(p), bank(p))

      (f:TransceiverClockType) :
        if length(group) > 1 :
          throw(Exception("Unexpected: multiple pins found with name %_" % [name(p)]))
        val ps-str =
          if processor-system?(f) :
            add(ps-gt-clock-indices, bank(f))
            "PS_"
          else :
            add(gt-clock-indices, bank(f))
            ""
        val pol-str = to-letter(polarity(f))
        val name* = to-string $ "%_MGTREFCLK[%_].I[%_].%_" % [ps-str, bank(f),
          index(f), pol-str]
        set-final-ref(p, name*)
        add-pin-prop-row(outline, name*, pad(p), bank(f))

      (f:TransceiverQuadType) :
        if length(group) > 1 :
          throw(Exception("Unexpected: multiple pins found with name %_" % [name(p)]))
        val ps-str = "PS_" when processor-system?(f) else ""
        switch(class(f)) :
          GTR : add(gtr-banks, bank(f))
          GTY : add(gty-banks, bank(f))
          GTH : add(gth-banks, bank(f))
        val class-str = to-string(class(f))
        val dir-str = to-str(direction(f))
        val pol-str = to-letter(polarity(f))
        val name* = to-string $ "%_M%_[%_].C[%_].%_.%_" % [ps-str, class-str,
          bank(f), index(f), dir-str, pol-str]
        set-final-ref(p, name*)
        add-pin-prop-row(outline, name*, pad(p), bank(f))

      (f) :
        ;Default pin property row(s)
        if length(group) > 1 :
          ;Multi-pad pin
          val grp-name = strip-last-comp(name(p))
          for (i in 0 to false, p* in group) do :
            val name* = "%_[%_]" % [grp-name, i]
            set-final-ref(p*, name*)
            add-pin-prop-row(outline, name*, pad(p*), bank(p*), symbol-bank = One(grp-name))
          if grp-name != "NC" : ; do not net no-connect pins together
            add-module-pin-and-net-loop(outline, grp-name)
        else :
          set-final-ref(p, name(p))
          add-pin-prop-row(outline, name(p), pad(p), bank(p))

  add-port-decl(outline, "PS_JTAG", "jtag", false)
  add-port-decl(outline, "PS_DDR_DQS", "diff-pair", to-tuple(dqs-indices))
  add-port-decl(outline, "PS_DDR_CK", "diff-pair", to-tuple(ddr-clock-indices))
  add-port-decl(outline, "MGTREFCLK", "ultrascale-gt-clock", to-tuple(gt-clock-indices))
  add-port-decl(outline, "PS_MGTREFCLK", "ultrascale-ps-gt-clock", to-tuple(ps-gt-clock-indices))
  add-port-decl(outline, "MGTH", "ultrascale-gt-quad", to-tuple(gth-banks))
  add-port-decl(outline, "MGTY", "ultrascale-gt-quad", to-tuple(gty-banks))
  add-port-decl(outline, "PS_MGTR", "ultrascale-gt-quad", to-tuple(gtr-banks))

;Create IO pin properties rows and add IO bank port declarations
;Returns the IO bank IDs
defn make-io-pin-properties (outline:ComponentOutline, io-pins:Vector<USIOPin>) -> IOBankIDs :
  val bank-group-table = IntTable<Vector<USIOPin>>()
  for p in io-pins do :
    val bid = bank(p)
    val group = set?(bank-group-table, bid, {Vector<USIOPin>()})
    add(group, p)
  val bank-groups = qsort(key, bank-group-table)

  val hd-banks = Vector<Int>()
  val hp-banks = Vector<Int>()
  val short-hp-banks = Vector<Int>()
  for kv in bank-groups do :
    val bid = key(kv)
    val group = value(kv)
    val port-name = match(group[0]) :
      (p:USHDIOPin) :
        add(hd-banks, bid)
        "IO_HD"
      (p:USHPDiffIOPin|USHPSingleIOPin) :
        switch(length(group)) :
          6 :
            add(short-hp-banks, bid)
            do(set-in-short-bank?{_ as USHPDiffIOPin|USHPSingleIOPin, true}, group)
            "IO_HP_S"
          52 :
            add(hp-banks, bid)
            "IO_HP"
          else :
            throw(Exception("Unexpected high performance bank size of %_ pins \
              on bank %_" % [length(group), bid]))
    for p in group do :
      val full-ref = append(port-name, ref-name(p))
      set-final-ref(p, full-ref)
      add-pin-prop-row(outline, full-ref, pad(p), bid)
  val ibi = IOBankIDs(to-tuple(hd-banks), to-tuple(hp-banks),
    to-tuple(short-hp-banks))

  add(comp-ports(outline), port-decl-stmt("IO_HD", "ultrascale-hd-io-bank",
    high-density-banks(ibi)))
  add(comp-ports(outline), port-decl-stmt("IO_HP", "ultrascale-hp-io-bank",
    high-perf-banks(ibi)))
  add(comp-ports(outline), port-decl-stmt("IO_HP_S", "ultrascale-short-hp-io-bank",
    short-high-perf-banks(ibi)))

  ibi

defn make-supports (outline:ComponentOutline, io-pins:Vector<USIOPin>, io-bank-ids:IOBankIDs) -> False :
  make-clock-supports(outline, io-pins)
  make-dci-vref-supports(outline, io-pins)
  make-byte-clock-supports(outline, io-pins)
  make-pci-reset-supports(outline, io-pins)
  make-adc-supports(outline, io-pins)
  make-i2c-supports(outline, io-pins)
  make-pmbus-supports(outline, io-pins)
  make-gpio-supports(outline, io-pins, io-bank-ids)

defn make-clock-supports (outline:ComponentOutline, io-pins:Vector<USIOPin>) -> False :
  val stmts = Vector<Expr>()

  val hdgc-banks = IntSet()
  val gc-banks = IntSet()
  val short-gc-banks = IntSet()

  for p in io-pins do :
    if any?({_ is HighDensityGlobalClockType}, funcs(p)) :
      if p is-not USHDIOPin :
        throw(Exception("High-density-global-clock-supporting pin %_ is not a high-density pin" % [p]))
      if index(p as USHDIOPin) < 5 or index(p as USHDIOPin) > 8 :
        throw(Exception("High-density-global-clock-supporting pin %_ has unexpected index %_" % [p, index(p as USHDIOPin)]))
      add(hdgc-banks, bank(p))
    if any?({_ is GlobalClockType}, funcs(p)) :
      match(p) :
        (p:USHPDiffIOPin) :
          if in-short-bank?(p) :
            if index(p) < 11 or index(p) > 12 :
              throw(Exception("Global-clock-supporting pin %_ in short group has unexpected index %_" % [p, index(p)]))
            add(short-gc-banks, bank(p))
          else :
            if index(p) < 11 or index(p) > 14 :
              throw(Exception("Global-clock-supporting pin %_ has unexpected index %_" % [p, index(p)]))
            add(gc-banks, bank(p))
        (p:USHDIOPin) :
          throw(Exception("Global-clock-supporting pin %_ is not a high-performance pin" % [p]))
        (p:USHPSingleIOPin) :
          throw(Exception("Global-clock-supporting pin %_ is not a differential pin" % [p]))

  if length(hdgc-banks) > 1 :
    val bank-ids-str = compactify-for-loop-indices(hdgc-banks)
    add(stmts, for-stmt("bank", bank-ids-str, [
      for-stmt("i", "5 through 8", [
        support-stmt("ultrascale-high-density-global-clock", [
          "N" => "comp.IO_HD[bank].L[i].N",
          "P" => "comp.IO_HD[bank].L[i].P"
      ])])]))
  else if length(hdgc-banks) == 1 :
    val bank-id = to-tuple(hdgc-banks)[0]
    add(stmts, for-stmt("i", "5 through 8", [
      support-stmt("ultrascale-high-density-global-clock", [
        "N" => to-string("comp.IO_HD[%_].L[i].N" % [bank-id]),
        "P" => to-string("comp.IO_HD[%_].L[i].P" % [bank-id])
      ])]))

  if length(gc-banks) > 1 :
    val bank-ids-str = compactify-for-loop-indices(gc-banks)
    add(stmts, for-stmt("bank", bank-ids-str, [
      support-stmt("ultrascale-global-clock", [
        "N" => "comp.IO_HP[bank].T[1].L[4].N",
        "P" => "comp.IO_HP[bank].T[1].L[4].P"]),
      support-stmt("ultrascale-global-clock", [
        "N" => "comp.IO_HP[bank].T[1].L[5].N",
        "P" => "comp.IO_HP[bank].T[1].L[5].P"]),
      support-stmt("ultrascale-global-clock", [
        "N" => "comp.IO_HP[bank].T[2].L[0].N",
        "P" => "comp.IO_HP[bank].T[2].L[0].P"]),
      support-stmt("ultrascale-global-clock", [
        "N" => "comp.IO_HP[bank].T[2].L[1].N",
        "P" => "comp.IO_HP[bank].T[2].L[1].P"])
      ]))
  else if length(gc-banks) == 1 :
    val bank-id = to-tuple(gc-banks)[0]
    add-all(stmts, [
      support-stmt("ultrascale-global-clock", [
        "N" => to-string("comp.IO_HP[%_].T[1].L[4].N" % [bank-id]),
        "P" => to-string("comp.IO_HP[%_].T[1].L[4].P" % [bank-id])]),
      support-stmt("ultrascale-global-clock", [
        "N" => to-string("comp.IO_HP[%_].T[1].L[5].N" % [bank-id]),
        "P" => to-string("comp.IO_HP[%_].T[1].L[5].P" % [bank-id])]),
      support-stmt("ultrascale-global-clock", [
        "N" => to-string("comp.IO_HP[%_].T[2].L[0].N" % [bank-id]),
        "P" => to-string("comp.IO_HP[%_].T[2].L[0].P" % [bank-id])]),
      support-stmt("ultrascale-global-clock", [
        "N" => to-string("comp.IO_HP[%_].T[2].L[1].N" % [bank-id]),
        "P" => to-string("comp.IO_HP[%_].T[2].L[1].P" % [bank-id])])
      ])

  if length(short-gc-banks) > 1 :
    val bank-ids-str = compactify-for-loop-indices(short-gc-banks)
    add(stmts, for-stmt("bank", bank-ids-str, [
      support-stmt("ultrascale-global-clock", [
        "N" => "comp.IO_HP_S[bank].T[1].L[4].N",
        "P" => "comp.IO_HP_S[bank].T[1].L[4].P"]),
      support-stmt("ultrascale-global-clock", [
        "N" => "comp.IO_HP_S[bank].T[1].L[5].N",
        "P" => "comp.IO_HP_S[bank].T[1].L[5].P"])
      ]))
  else if length(short-gc-banks) == 1 :
    val bank-id = to-tuple(short-gc-banks)[0]
    add-all(stmts, [
      support-stmt("ultrascale-global-clock", [
        "N" => to-string("comp.IO_HP_S[%_].T[1].L[4].N" % [bank-id]),
        "P" => to-string("comp.IO_HP_S[%_].T[1].L[4].P" % [bank-id])]),
      support-stmt("ultrascale-global-clock", [
        "N" => to-string("comp.IO_HP_S[%_].T[1].L[5].N" % [bank-id]),
        "P" => to-string("comp.IO_HP_S[%_].T[1].L[5].P" % [bank-id])])
      ])

  add-support-func(outline, "clock", stmts)

defn make-dci-vref-supports (outline:ComponentOutline, io-pins:Vector<USIOPin>) -> False :
  val stmts = Vector<Expr>()
  for p in filter({any?({_ is DCIRefType}, funcs(_))}, io-pins) do :
    add(stmts, support-stmt("ultrascale-dci-vref", [
      "p" => to-string("comp.%_" % [final-ref(p)])
      ]))
  add-support-func(outline, "dci-vref", stmts)

defn make-byte-clock-supports (outline:ComponentOutline, io-pins:Vector<USIOPin>) -> False :
  val stmts = Vector<Expr>()

  val dbc-banks = IntSet()
  val qbc-banks = IntSet()

  for p in io-pins do :
    if any?({_ is DedicatedByteClockType}, funcs(p)) :
      match(p) :
        (p:USHPDiffIOPin) :
          if in-short-bank?(p) :
            throw(Exception("Dedicated-byte-clock-supporting pin %_ is in a short bank" % [p]))
          if not contains?([1 4 19 22], index(p)) :
            throw(Exception("Dedicated-byte-clock-supporting pin %_ has unexpected index %_" % [p, index(p)]))
          add(dbc-banks, bank(p))
        (p:USHDIOPin) :
          throw(Exception("Dedicated-byte-clock-supporting pin %_ is not a high-performance pin" % [p]))
        (p:USHPSingleIOPin) :
          throw(Exception("Dedicated-byte-clock-supporting pin %_ is not a differential pin" % [p]))
    if any?({_ is QuadByteClockType}, funcs(p)) :
      match(p) :
        (p:USHPDiffIOPin) :
          if in-short-bank?(p) :
            throw(Exception("Quad-byte-clock-supporting pin %_ is in a short bank" % [p]))
          if not contains?([7 10 13 16], index(p)) :
            throw(Exception("Quad-byte-clock-supporting pin %_ has unexpected index %_" % [p, index(p)]))
          add(qbc-banks, bank(p))
        (p:USHDIOPin) :
          throw(Exception("Quad-byte-clock-supporting pin %_ is not a high-performance pin" % [p]))
        (p:USHPSingleIOPin) :
          throw(Exception("Quad-byte-clock-supporting pin %_ is not a differential pin" % [p]))

  if length(dbc-banks) > 1 :
    val bank-ids-str = compactify-for-loop-indices(dbc-banks)
    add(stmts, for-stmt("bank", bank-ids-str, [
      support-stmt("ultrascale-dedicated-byte-clock", [
        "N" => "comp.IO_HP[bank].T[0].L[0].N",
        "P" => "comp.IO_HP[bank].T[0].L[0].P"]),
      support-stmt("ultrascale-dedicated-byte-clock", [
        "N" => "comp.IO_HP[bank].T[0].L[3].N",
        "P" => "comp.IO_HP[bank].T[0].L[3].P"]),
      support-stmt("ultrascale-dedicated-byte-clock", [
        "N" => "comp.IO_HP[bank].T[3].L[0].N",
        "P" => "comp.IO_HP[bank].T[3].L[0].P"]),
      support-stmt("ultrascale-dedicated-byte-clock", [
        "N" => "comp.IO_HP[bank].T[3].L[3].N",
        "P" => "comp.IO_HP[bank].T[3].L[3].P"])
      ]))
  else if length(dbc-banks) == 1 :
    val bank-id = to-tuple(dbc-banks)[0]
    add-all(stmts, [
      support-stmt("ultrascale-dedicated-byte-clock", [
        "N" => to-string("comp.IO_HP[%_].T[0].L[0].N" % [bank-id]),
        "P" => to-string("comp.IO_HP[%_].T[0].L[0].P" % [bank-id])]),
      support-stmt("ultrascale-dedicated-byte-clock", [
        "N" => to-string("comp.IO_HP[%_].T[0].L[3].N" % [bank-id]),
        "P" => to-string("comp.IO_HP[%_].T[0].L[3].P" % [bank-id])]),
      support-stmt("ultrascale-dedicated-byte-clock", [
        "N" => to-string("comp.IO_HP[%_].T[3].L[0].N" % [bank-id]),
        "P" => to-string("comp.IO_HP[%_].T[3].L[0].P" % [bank-id])]),
      support-stmt("ultrascale-dedicated-byte-clock", [
        "N" => to-string("comp.IO_HP[%_].T[3].L[3].N" % [bank-id]),
        "P" => to-string("comp.IO_HP[%_].T[3].L[3].P" % [bank-id])])
      ])

  if length(qbc-banks) > 1 :
    val bank-ids-str = compactify-for-loop-indices(qbc-banks)
    add(stmts, for-stmt("bank", bank-ids-str, [
      support-stmt("ultrascale-quad-byte-clock", [
        "N" => "comp.IO_HP[bank].T[1].L[0].N",
        "P" => "comp.IO_HP[bank].T[1].L[0].P"]),
      support-stmt("ultrascale-quad-byte-clock", [
        "N" => "comp.IO_HP[bank].T[1].L[3].N",
        "P" => "comp.IO_HP[bank].T[1].L[3].P"]),
      support-stmt("ultrascale-quad-byte-clock", [
        "N" => "comp.IO_HP[bank].T[2].L[0].N",
        "P" => "comp.IO_HP[bank].T[2].L[0].P"]),
      support-stmt("ultrascale-quad-byte-clock", [
        "N" => "comp.IO_HP[bank].T[2].L[3].N",
        "P" => "comp.IO_HP[bank].T[2].L[3].P"])
      ]))
  else if length(qbc-banks) == 1 :
    val bank-id = to-tuple(qbc-banks)[0]
    add-all(stmts, [
      support-stmt("ultrascale-quad-byte-clock", [
        "N" => to-string("comp.IO_HP[%_].T[1].L[0].N" % [bank-id]),
        "P" => to-string("comp.IO_HP[%_].T[1].L[0].P" % [bank-id])]),
      support-stmt("ultrascale-quad-byte-clock", [
        "N" => to-string("comp.IO_HP[%_].T[1].L[3].N" % [bank-id]),
        "P" => to-string("comp.IO_HP[%_].T[1].L[3].P" % [bank-id])]),
      support-stmt("ultrascale-quad-byte-clock", [
        "N" => to-string("comp.IO_HP[%_].T[2].L[0].N" % [bank-id]),
        "P" => to-string("comp.IO_HP[%_].T[2].L[0].P" % [bank-id])]),
      support-stmt("ultrascale-quad-byte-clock", [
        "N" => to-string("comp.IO_HP[%_].T[2].L[3].N" % [bank-id]),
        "P" => to-string("comp.IO_HP[%_].T[2].L[3].P" % [bank-id])])
      ])

  add-support-func(outline, "byte-clock", stmts)

defn make-pci-reset-supports (outline:ComponentOutline, io-pins:Vector<USIOPin>) -> False :
  val pci-reset-pins = to-tuple $ filter({any?({_ is PCIResetType}, funcs(_))}, io-pins)
  if length(pci-reset-pins) != 2 :
    throw(Exception("Expected 2 PCI reset pins but found %_: %_" % [length(pci-reset-pins), pci-reset-pins]))
  for p in pci-reset-pins do :
    match(p) :
      (p:USHPDiffIOPin) :
        if bank(p) != 65 :
          throw(Exception("PCI reset pin %_ is not on bank 65" % [p]))
        if in-short-bank?(p) :
          throw(Exception("PCI reset pin %_ is in a short bank" % [p]))
        if index(p) != 24 :
          throw(Exception("PCI reset pin %_ index is not 24" % [p]))
      (p) :
        throw(Exception("PCI reset pin %_ is not a high-performance differential pin" % [p]))

  add-support-func(outline, "pci-reset", [
    support-stmt("ultrascale-pci-reset", [
      "N" => "comp.IO_HP[65].T[3].L[5].N"
      "P" => "comp.IO_HP[65].T[3].L[5].P"
      ])])

defn make-adc-supports (outline:ComponentOutline, io-pins:Vector<USIOPin>) -> False :
  val stmts = Vector<Expr>()

  val hp-bc-table = HashTable-init<Int,IntSet>({IntSet()})
  val hd-bc-table = HashTable-init<Int,IntSet>({IntSet()})
  for p in io-pins do :
    if any?({_ is AnalogInputType}, funcs(p)) :
      match(p) :
        (p:USHPDiffIOPin) :
          if in-short-bank?(p) :
            throw(Exception("Analog input pin %_ is in a short bank" % [p]))
          add(hp-bc-table[bank(p)], index(p))
        (p:USHPSingleIOPin) :
          throw(Exception("Analog input pin %_ is not differential" % [p]))
        (p:USHDIOPin) :
          add(hd-bc-table[bank(p)], index(p))

  if length(hp-bc-table) > 0 :
    val bc-sets = qsort(key, hp-bc-table)
    val sorted-group-vals = for kv in bc-sets seq :
      val bid = key(kv)
      val channels = qsort(value(kv))
      val group-ids = to-tuple $ seq(group-and-index, channels)
      bid => group-ids
    val loop-str = to-string("[%,]" % [sorted-group-vals])
    add(stmts, for-stmt("kv", loop-str, [
      "val bank = key(kv)"
      for-stmt("gc", "value(kv)", [
        "val [group, channel] = gc",
        support-stmt("adc-pair", [
          "adc-pair.N" => "comp.IO_HP[bank].T[group].L[channel].N",
          "adc-pair.P" => "comp.IO_HP[bank].T[group].L[channel].P"])
        ])
      ]))
  if length(hd-bc-table) > 0 :
    val bc-sets = qsort(key, hd-bc-table)
    val sorted-group-vals = for kv in bc-sets seq :
      val bid = key(kv)
      val channels = qsort(value(kv))
      bid => channels
    val loop-str = to-string("[%,]" % [sorted-group-vals])
    add(stmts, for-stmt("kv", loop-str, [
      "val bank = key(kv)"
      for-stmt("channel", "value(kv)", [
        support-stmt("adc-pair", [
          "adc-pair.N" => "comp.IO_HD[bank].L[channel].N",
          "adc-pair.P" => "comp.IO_HD[bank].L[channel].P"])
        ])
      ]))

  add-support-func(outline, "adc", stmts)

defn make-i2c-supports (outline:ComponentOutline, io-pins:Vector<USIOPin>) -> False :
  val sda-pin? = find({any?({_ is I2CDataType}, funcs(_))}, io-pins)
  val scl-pin? = find({any?({_ is I2CClockType}, funcs(_))}, io-pins)
  val stmt = match(sda-pin?, scl-pin?) :
    (p1:USIOPin, p2:USIOPin) :
      support-stmt("i2c", [
        "sda" => to-string("comp.%_" % [final-ref(p1)])
        "scl" => to-string("comp.%_" % [final-ref(p2)])
        ])
    (_0:False, _1) :
      throw(Exception("I2C data pin not found"))
    (_0, _1:False) :
      throw(Exception("I2C clock pin not found"))
  add-support-func(outline, "i2c", [stmt])

defn make-pmbus-supports (outline:ComponentOutline, io-pins:Vector<USIOPin>) -> False :
  val stmts = Vector<Expr>()
  for p in filter({any?({_ is PMBusAlertType}, funcs(_))}, io-pins) do :
    add(stmts, support-stmt("ultrascale-pmbus-alert", [
      "p" => to-string("comp.%_" % [final-ref(p)])
      ]))
  add-support-func(outline, "pmbus-alert", stmts)

defn make-gpio-supports (outline:ComponentOutline, io-pins:Vector<USIOPin>, io-bank-ids:IOBankIDs) -> False :
  val stmts = Vector<Expr>()

  val hd-banks = high-density-banks(io-bank-ids)
  if length(hd-banks) > 0 :
    add(stmts, for-stmt("bank", compactify-for-loop-indices(hd-banks), [
      for-stmt("i", "1 through 12", [
        support-stmt("gpio", [
          "gpio" => "comp.IO_HD[bank].L[i].P"
        ]),
        support-stmt("gpio", [
          "gpio" => "comp.IO_HD[bank].L[i].N"
        ])
      ])
      ]))

  val hp-banks = high-perf-banks(io-bank-ids)
  if length(hp-banks) > 0 :
    add(stmts, for-stmt("bank", compactify-for-loop-indices(hp-banks), [
      for-stmt("i", "0 to 4", [
        for-stmt("j", "0 to 6", [
          support-stmt("gpio", [
            "gpio" => "comp.IO_HP[bank].T[i].L[j].P"
          ]),
          support-stmt("gpio", [
            "gpio" => "comp.IO_HP[bank].T[i].L[j].N"
          ])
          ])
        support-stmt("gpio", [
          "gpio" => "comp.IO_HP[bank].T[i].S"
          ]),
        ])
      ]))

  val short-banks = short-high-perf-banks(io-bank-ids)
  if length(short-banks) > 0 :
    add(stmts, for-stmt("bank", compactify-for-loop-indices(short-banks), [
      for-stmt("i", "0 to 2", [
        support-stmt("gpio", [
          "gpio" => "comp.IO_HP_S[bank].L[i].P"
          ]),
        support-stmt("gpio", [
          "gpio" => "comp.IO_HP_S[bank].L[i].N"
          ]),
        support-stmt("gpio", [
          "gpio" => "comp.IO_HP_S[bank].L[i].S"
          ]),
        ])
      ]))

  add-support-func(outline, "gpio", stmts)

;============================================================
;========================= Helpers ==========================
;============================================================

defn set-final-ref (p:UltrascalePin, s:Printable) -> False :
  set-final-ref(p, to-string(s))

defn add-support-func (outline:ComponentOutline, name:String, stmts:Seqable<Expr>) -> False :
  add(support-stmts(outline), "make-%_-supports(comp)" % [name])
  add(support-funcs(outline), BodyExpr("defn make-%_-supports (comp:Instance) :" % [name],
    [BodyExpr("inside pcb-module :", to-tuple(stmts))]))

;Returns the group number (0 through 3) and group channel index (0 through 5)
;for the given HP diff IO pin bank channel index (1 through 24)
defn group-and-index (ci:Int) -> [Int,Int] :
  if ci <= 0 or ci > 24 :
    throw(Exception("Invalid bank diff-pair channel index %_" % [ci]))
  val grp = (ci - 1) / 6
  val grp-index = (ci - 1) % 6
  [grp, grp-index]
